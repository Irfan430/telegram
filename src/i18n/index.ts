import { logger } from '@/core/logger';

// Supported languages
export type Language = 'bn' | 'en';

// Translation interface
interface Translation {
  [key: string]: string | Translation;
}

// Translations
const translations: Record<Language, Translation> = {
  bn: {
    // Common
    common: {
      back: 'ЁЯФЩ ржкрж┐ржЫржирзЗ',
      home: 'ЁЯПа рж╣рзЛржо',
      cancel: 'тЭМ ржмрж╛рждрж┐рж▓',
      save: 'ЁЯТ╛ рж╕ржВрж░ржХрзНрж╖ржг',
      loading: 'тП│ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...',
      error: 'тЭМ рждрзНрж░рзБржЯрж┐',
      success: 'тЬЕ рж╕ржлрж▓',
      notFound: 'ЁЯФН ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐',
      permission: 'ЁЯЪл ржЕржирзБржорждрж┐ ржирзЗржЗ',
      validation: 'тЪая╕П ржнрзБрж▓ ржЗржиржкрзБржЯ',
      internal: 'ЁЯТе ржЕржнрзНржпржирзНрждрж░рзАржг рждрзНрж░рзБржЯрж┐',
    },
    // Start
    start: {
      welcome: 'ЁЯОЙ <b>HyperGiga TG Bot</b> ржП рж╕рзНржмрж╛ржЧрждржо!\n\nржЖржорж┐ ржПржХржЯрж┐ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржпрж╛ ржЖржкржирж╛ржХрзЗ ржмрж┐ржнрж┐ржирзНржи ржХрж╛ржЬрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рзЗред\n\nЁЯФз <b>ржЙржкрж▓ржмрзНржз ржмрзИрж╢рж┐рж╖рзНржЯрзНржп:</b>\nтАв ЁЯУе ржорж┐ржбрж┐ржпрж╝рж╛ ржбрж╛ржЙржирж▓рзЛржб\nтАв ЁЯдЦ AI рж╕рж╣рж╛ржпрж╝рждрж╛\nтАв ЁЯОи рж╕рзНржЯрж┐ржХрж╛рж░ рждрзИрж░рж┐\nтАв ЁЯОо ржЧрзЗржорж╕\nтАв ЁЯФз ржЗржЙржЯрж┐рж▓рж┐ржЯрж┐ ржЯрзБрж▓рж╕\n\n/help ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖрж░ржУ ржЬрж╛ржирзБржи!',
      help: 'тЭУ рж╕рж╛рж╣рж╛ржпрзНржп',
      settings: 'тЪЩя╕П рж╕рзЗржЯрж┐ржВрж╕',
    },
    // Help
    help: {
      title: 'ЁЯУЪ <b>ржХржорж╛ржирзНржб рж╕рж╛рж╣рж╛ржпрзНржп</b>',
      categories: 'ЁЯУВ <b>ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐:</b>',
      usage: 'ЁЯУЦ <b>ржмрзНржпржмрж╣рж╛рж░:</b>',
      examples: 'ЁЯТб <b>ржЙржжрж╛рж╣рж░ржг:</b>',
      cooldown: 'тП▒я╕П <b>ржХрзБрж▓ржбрж╛ржЙржи:</b>',
      roles: 'ЁЯСе <b>ржЕржирзБржорждрж┐:</b>',
      backToCategories: 'ЁЯФЩ ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐рждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи',
      backToHelp: 'ЁЯФЩ рж╕рж╛рж╣рж╛ржпрзНржпрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи',
    },
    // Language
    lang: {
      current: 'ЁЯМР <b>ржмрж░рзНрждржорж╛ржи ржнрж╛рж╖рж╛:</b> {language}',
      select: 'ЁЯМР <b>ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:</b>',
      changed: 'тЬЕ ржнрж╛рж╖рж╛ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {language}',
    },
    // Me
    me: {
      profile: 'ЁЯСд <b>ржкрзНрж░рзЛржлрж╛ржЗрж▓</b>\n\nЁЯСд <b>ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА:</b> {username}\nЁЯСС <b>ржнрзВржорж┐ржХрж╛:</b> {role}\nЁЯУЕ <b>ржпрзЛржЧржжрж╛ржи:</b> {joined}\nЁЯПЖ <b>ржмрзНржпрж╛ржЬ:</b> {badges}',
      quota: 'ЁЯУК <b>ржХрзЛржЯрж╛ ржмрзНржпржмрж╣рж╛рж░</b>\n\nЁЯУЭ <b>ржХржорж╛ржирзНржб:</b> {commands_used}/{commands_limit}\nЁЯУе <b>ржбрж╛ржЙржирж▓рзЛржб:</b> {downloads_used}/{downloads_limit}\nЁЯдЦ <b>AI ржЕржирзБрж░рзЛржз:</b> {ai_used}/{ai_limit}\nЁЯОи <b>ржорж┐ржбрж┐ржпрж╝рж╛ рж░рзВржкрж╛ржирзНрждрж░:</b> {media_used}/{media_limit}\n\nЁЯФД <b>рж░рж┐рж╕рзЗржЯ:</b> {reset_time}',
    },
    // Settings
    settings: {
      title: 'тЪЩя╕П <b>рж╕рзЗржЯрж┐ржВрж╕</b>',
      language: 'ЁЯМР ржнрж╛рж╖рж╛',
      notifications: 'ЁЯФФ ржмрж┐ржЬрзНржЮржкрзНрждрж┐',
      privacy: 'ЁЯФТ ржЧрзЛржкржирзАржпрж╝рждрж╛',
      save: 'ЁЯТ╛ рж╕ржВрж░ржХрзНрж╖ржг',
    },
    // Ping
    ping: {
      response: 'ЁЯПУ <b>ржкрж┐ржВ:</b> {latency}ms',
    },
    // Uptime
    uptime: {
      response: 'тП▒я╕П <b>ржЖржкржЯрж╛ржЗржо:</b> {uptime}',
    },
    // Stats
    stats: {
      title: 'ЁЯУК <b>ржмржЯ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи</b>',
      users: 'ЁЯСе <b>ржорзЛржЯ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА:</b> {count}',
      chats: 'ЁЯТм <b>рж╕ржХрзНрж░рж┐ржпрж╝ ржЪрзНржпрж╛ржЯ:</b> {count}',
      commands: 'ЁЯУЭ <b>ржорзЛржЯ ржХржорж╛ржирзНржб:</b> {count}',
      uptime: 'тП▒я╕П <b>ржЖржкржЯрж╛ржЗржо:</b> {uptime}',
    },
    // Download
    download: {
      processing: 'ЁЯУе ржбрж╛ржЙржирж▓рзЛржб рж╣ржЪрзНржЫрзЗ...',
      success: 'тЬЕ ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржи!',
      error: 'тЭМ ржбрж╛ржЙржирж▓рзЛржб рждрзНрж░рзБржЯрж┐: {error}',
      unsupported: 'тЭМ ржЕрж╕ржорж░рзНржерж┐ржд URL',
    },
    // Convert
    convert: {
      processing: 'ЁЯФД рж░рзВржкрж╛ржирзНрждрж░ рж╣ржЪрзНржЫрзЗ...',
      success: 'тЬЕ рж░рзВржкрж╛ржирзНрждрж░ рж╕ржорзНржкржирзНржи!',
      error: 'тЭМ рж░рзВржкрж╛ржирзНрждрж░ рждрзНрж░рзБржЯрж┐: {error}',
    },
    // YouTube
    yt: {
      searching: 'ЁЯФН ржЕржирзБрж╕ржирзНржзрж╛ржи рж╣ржЪрзНржЫрзЗ...',
      results: 'ЁЯУ║ <b>YouTube ржлрж▓рж╛ржлрж▓:</b>',
      noResults: 'тЭМ ржХрзЛржи ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐',
    },
    // AI Commands
    ask: {
      processing: 'ЁЯдЦ AI ржЪрж┐ржирзНрждрж╛ ржХрж░ржЫрзЗ...',
      error: 'тЭМ AI рждрзНрж░рзБржЯрж┐: {error}',
    },
    summarize: {
      processing: 'ЁЯУЭ рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ...',
      error: 'тЭМ рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк рждрзНрж░рзБржЯрж┐: {error}',
    },
    translate: {
      processing: 'ЁЯМР ржЕржирзБржмрж╛ржж рж╣ржЪрзНржЫрзЗ...',
      error: 'тЭМ ржЕржирзБржмрж╛ржж рждрзНрж░рзБржЯрж┐: {error}',
    },
    ocr: {
      processing: 'ЁЯСБя╕П ржЯрзЗржХрзНрж╕ржЯ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...',
      error: 'тЭМ OCR рждрзНрж░рзБржЯрж┐: {error}',
    },
    tts: {
      processing: 'ЁЯФК ржЕржбрж┐ржУ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ...',
      error: 'тЭМ TTS рждрзНрж░рзБржЯрж┐: {error}',
    },
    stt: {
      processing: 'ЁЯОд ржЯрзЗржХрзНрж╕ржЯ рж░рзВржкрж╛ржирзНрждрж░ рж╣ржЪрзНржЫрзЗ...',
      error: 'тЭМ STT рждрзНрж░рзБржЯрж┐: {error}',
    },
    // Sticker Commands
    sticker: {
      success: 'ЁЯОи рж╕рзНржЯрж┐ржХрж╛рж░ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    toimg: {
      success: 'ЁЯЦ╝я╕П ржЫржмрж┐рждрзЗ рж░рзВржкрж╛ржирзНрждрж░рж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    bgremove: {
      success: 'ЁЯОн ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб рж╕рж░рж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    upscale: {
      success: 'ЁЯФН ржЫржмрж┐рж░ ржорж╛ржи ржЙржирзНржиржд рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    watermark: {
      success: 'ЁЯТз ржУржпрж╝рж╛ржЯрж╛рж░ржорж╛рж░рзНржХ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    // Utility Commands
    shorten: {
      success: 'ЁЯФЧ URL рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    expand: {
      success: 'ЁЯФЧ URL ржкрзНрж░рж╕рж╛рж░рж┐ржд ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    wiki: {
      success: 'ЁЯУЪ ржЙржЗржХрж┐ржкрж┐ржбрж┐ржпрж╝рж╛ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ!',
    },
    define: {
      success: 'ЁЯУЦ рж╢ржмрзНржжрзЗрж░ рж╕ржВржЬрзНржЮрж╛ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ!',
    },
    remind: {
      success: 'тП░ рж░рж┐ржорж╛ржЗржирзНржбрж╛рж░ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    todo: {
      success: 'ЁЯУЭ ржЯрзБржбрзБ рждрж╛рж▓рж┐ржХрж╛ ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    poll: {
      success: 'ЁЯЧ│я╕П ржкрзЛрж▓ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    quiz: {
      success: 'ЁЯза ржХрзБржЗржЬ рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    // Game Commands
    rpg: {
      success: 'тЪФя╕П RPG ржЧрзЗржо рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    tictactoe: {
      success: 'тнХ ржЯрж┐ржХ-ржЯрзНржпрж╛ржХ-ржЯрзЛ ржЧрзЗржо рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    chess: {
      success: 'тЩЯя╕П ржжрж╛ржмрж╛ ржЧрзЗржо рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    trivia: {
      success: 'ЁЯза ржЯрзНрж░рж┐ржнрж┐ржпрж╝рж╛ ржкрзНрж░рж╢рзНржи!',
    },
    leaderboard: {
      success: 'ЁЯПЖ рж▓рж┐ржбрж╛рж░ржмрзЛрж░рзНржб ржжрзЗржЦрж╛ржирзЛ рж╣ржЪрзНржЫрзЗ!',
    },
    // Admin Commands
    mod: {
      enabled: 'ЁЯЫбя╕П ржоржбрж╛рж░рзЗрж╢ржи рж╕ржХрзНрж░рж┐ржпрж╝!',
    },
    warn: {
      success: 'тЪая╕П рж╕рждрж░рзНржХрждрж╛ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    mute: {
      success: 'ЁЯФЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржирзАрж░ржм ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    ban: {
      success: 'ЁЯЪл ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржирж┐рж╖рж┐ржжрзНржз ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    purge: {
      success: 'ЁЯЧСя╕П ржмрж╛рж░рзНрждрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    slowmode: {
      set: 'ЁЯРМ рж╕рзНрж▓рзЛ ржорзЛржб рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!',
    },
    welcome: {
      enabled: 'ЁЯСЛ рж╕рзНржмрж╛ржЧржд ржмрж╛рж░рзНрждрж╛ рж╕ржХрзНрж░рж┐ржпрж╝!',
    },
    goodbye: {
      enabled: 'ЁЯСЛ ржмрж┐ржжрж╛ржпрж╝ ржмрж╛рж░рзНрждрж╛ рж╕ржХрзНрж░рж┐ржпрж╝!',
    },
    // Errors
    errors: {
      notFound: 'тЭМ ржХржорж╛ржирзНржб ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐: {command}',
      permission: 'ЁЯЪл ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЕржирзБржорждрж┐ ржирзЗржЗ',
      validation: 'тЪая╕П ржнрзБрж▓ ржЗржиржкрзБржЯред /help ржжрзЗржЦрзБржи',
      internal: 'ЁЯТе ржЕржнрзНржпржирзНрждрж░рзАржг рждрзНрж░рзБржЯрж┐ред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи',
    },
  },
  en: {
    // Common
    common: {
      back: 'ЁЯФЩ Back',
      home: 'ЁЯПа Home',
      cancel: 'тЭМ Cancel',
      save: 'ЁЯТ╛ Save',
      loading: 'тП│ Loading...',
      error: 'тЭМ Error',
      success: 'тЬЕ Success',
      notFound: 'ЁЯФН Not found',
      permission: 'ЁЯЪл Permission denied',
      validation: 'тЪая╕П Invalid input',
      internal: 'ЁЯТе Internal error',
    },
    // Start
    start: {
      welcome: 'ЁЯОЙ <b>Welcome to HyperGiga TG Bot!</b>\n\nI\'m a powerful Telegram bot that can help you with various tasks.\n\nЁЯФз <b>Available features:</b>\nтАв ЁЯУе Media downloads\nтАв ЁЯдЦ AI assistance\nтАв ЁЯОи Sticker creation\nтАв ЁЯОо Games\nтАв ЁЯФз Utility tools\n\nUse /help command to learn more!',
      help: 'тЭУ Help',
      settings: 'тЪЩя╕П Settings',
    },
    // Help
    help: {
      title: 'ЁЯУЪ <b>Command Help</b>',
      categories: 'ЁЯУВ <b>Categories:</b>',
      usage: 'ЁЯУЦ <b>Usage:</b>',
      examples: 'ЁЯТб <b>Examples:</b>',
      cooldown: 'тП▒я╕П <b>Cooldown:</b>',
      roles: 'ЁЯСе <b>Permissions:</b>',
      backToCategories: 'ЁЯФЩ Back to categories',
      backToHelp: 'ЁЯФЩ Back to help',
    },
    // Language
    lang: {
      current: 'ЁЯМР <b>Current language:</b> {language}',
      select: 'ЁЯМР <b>Select language:</b>',
      changed: 'тЬЕ Language changed to: {language}',
    },
    // Me
    me: {
      profile: 'ЁЯСд <b>Profile</b>\n\nЁЯСд <b>User:</b> {username}\nЁЯСС <b>Role:</b> {role}\nЁЯУЕ <b>Joined:</b> {joined}\nЁЯПЖ <b>Badges:</b> {badges}',
      quota: 'ЁЯУК <b>Quota Usage</b>\n\nЁЯУЭ <b>Commands:</b> {commands_used}/{commands_limit}\nЁЯУе <b>Downloads:</b> {downloads_used}/{downloads_limit}\nЁЯдЦ <b>AI Requests:</b> {ai_used}/{ai_limit}\nЁЯОи <b>Media Conversions:</b> {media_used}/{media_limit}\n\nЁЯФД <b>Reset:</b> {reset_time}',
    },
    // Settings
    settings: {
      title: 'тЪЩя╕П <b>Settings</b>',
      language: 'ЁЯМР Language',
      notifications: 'ЁЯФФ Notifications',
      privacy: 'ЁЯФТ Privacy',
      save: 'ЁЯТ╛ Save',
    },
    // Ping
    ping: {
      response: 'ЁЯПУ <b>Ping:</b> {latency}ms',
    },
    // Uptime
    uptime: {
      response: 'тП▒я╕П <b>Uptime:</b> {uptime}',
    },
    // Stats
    stats: {
      title: 'ЁЯУК <b>Bot Statistics</b>',
      users: 'ЁЯСе <b>Total users:</b> {count}',
      chats: 'ЁЯТм <b>Active chats:</b> {count}',
      commands: 'ЁЯУЭ <b>Total commands:</b> {count}',
      uptime: 'тП▒я╕П <b>Uptime:</b> {uptime}',
    },
    // Download
    download: {
      processing: 'ЁЯУе Downloading...',
      success: 'тЬЕ Download completed!',
      error: 'тЭМ Download error: {error}',
      unsupported: 'тЭМ Unsupported URL',
    },
    // Convert
    convert: {
      processing: 'ЁЯФД Converting...',
      success: 'тЬЕ Conversion completed!',
      error: 'тЭМ Conversion error: {error}',
    },
    // YouTube
    yt: {
      searching: 'ЁЯФН Searching...',
      results: 'ЁЯУ║ <b>YouTube Results:</b>',
      noResults: 'тЭМ No results found',
    },
    // AI Commands
    ask: {
      processing: 'ЁЯдЦ AI is thinking...',
      error: 'тЭМ AI error: {error}',
    },
    summarize: {
      processing: 'ЁЯУЭ Creating summary...',
      error: 'тЭМ Summary error: {error}',
    },
    translate: {
      processing: 'ЁЯМР Translating...',
      error: 'тЭМ Translation error: {error}',
    },
    ocr: {
      processing: 'ЁЯСБя╕П Extracting text...',
      error: 'тЭМ OCR error: {error}',
    },
    tts: {
      processing: 'ЁЯФК Generating audio...',
      error: 'тЭМ TTS error: {error}',
    },
    stt: {
      processing: 'ЁЯОд Converting to text...',
      error: 'тЭМ STT error: {error}',
    },
    // Sticker Commands
    sticker: {
      success: 'ЁЯОи Sticker created!',
    },
    toimg: {
      success: 'ЁЯЦ╝я╕П Converted to image!',
    },
    bgremove: {
      success: 'ЁЯОн Background removed!',
    },
    upscale: {
      success: 'ЁЯФН Image enhanced!',
    },
    watermark: {
      success: 'ЁЯТз Watermark added!',
    },
    // Utility Commands
    shorten: {
      success: 'ЁЯФЧ URL shortened!',
    },
    expand: {
      success: 'ЁЯФЧ URL expanded!',
    },
    wiki: {
      success: 'ЁЯУЪ Wikipedia information found!',
    },
    define: {
      success: 'ЁЯУЦ Word definition found!',
    },
    remind: {
      success: 'тП░ Reminder set!',
    },
    todo: {
      success: 'ЁЯУЭ Todo list updated!',
    },
    poll: {
      success: 'ЁЯЧ│я╕П Poll created!',
    },
    quiz: {
      success: 'ЁЯза Quiz started!',
    },
    // Game Commands
    rpg: {
      success: 'тЪФя╕П RPG game started!',
    },
    tictactoe: {
      success: 'тнХ Tic-tac-toe game started!',
    },
    chess: {
      success: 'тЩЯя╕П Chess game started!',
    },
    trivia: {
      success: 'ЁЯза Trivia question!',
    },
    leaderboard: {
      success: 'ЁЯПЖ Showing leaderboard!',
    },
    // Admin Commands
    mod: {
      enabled: 'ЁЯЫбя╕П Moderation enabled!',
    },
    warn: {
      success: 'тЪая╕П Warning issued!',
    },
    mute: {
      success: 'ЁЯФЗ User muted!',
    },
    ban: {
      success: 'ЁЯЪл User banned!',
    },
    purge: {
      success: 'ЁЯЧСя╕П Messages deleted!',
    },
    slowmode: {
      set: 'ЁЯРМ Slow mode set!',
    },
    welcome: {
      enabled: 'ЁЯСЛ Welcome message enabled!',
    },
    goodbye: {
      enabled: 'ЁЯСЛ Goodbye message enabled!',
    },
    // Errors
    errors: {
      notFound: 'тЭМ Command not found: {command}',
      permission: 'ЁЯЪл You don\'t have permission to use this command',
      validation: 'тЪая╕П Invalid input. See /help',
      internal: 'ЁЯТе Internal error. Try again later',
    },
  },
};

// I18n manager
export class I18nManager {
  private static instance: I18nManager;
  private defaultLanguage: Language = 'bn';

  private constructor() {}

  static getInstance(): I18nManager {
    if (!I18nManager.instance) {
      I18nManager.instance = new I18nManager();
    }
    return I18nManager.instance;
  }

  async initialize(): Promise<void> {
    logger.info('i18n initialized', { defaultLanguage: this.defaultLanguage });
  }

  t(key: string, lang: Language = this.defaultLanguage, params?: Record<string, any>): string {
    const keys = key.split('.');
    let value: any = translations[lang] || translations[this.defaultLanguage];

    for (const k of keys) {
      if (value && typeof value === 'object' && k in value) {
        value = value[k];
      } else {
        // Fallback to default language
        value = translations[this.defaultLanguage];
        for (const fallbackKey of keys) {
          if (value && typeof value === 'object' && fallbackKey in value) {
            value = value[fallbackKey];
          } else {
            return key; // Return key if not found
          }
        }
        break;
      }
    }

    if (typeof value !== 'string') {
      return key;
    }

    if (params) {
      return value.replace(/\{(\w+)\}/g, (match, param) => {
        return params[param] !== undefined ? String(params[param]) : match;
      });
    }

    return value;
  }

  tWithFallback(key: string, lang: Language, fallbackLang: Language = 'en', params?: Record<string, any>): string {
    const result = this.t(key, lang, params);
    if (result === key && lang !== fallbackLang) {
      return this.t(key, fallbackLang, params);
    }
    return result;
  }

  has(key: string, lang: Language = this.defaultLanguage): boolean {
    const keys = key.split('.');
    let value: any = translations[lang];

    for (const k of keys) {
      if (value && typeof value === 'object' && k in value) {
        value = value[k];
      } else {
        return false;
      }
    }

    return typeof value === 'string';
  }

  getAll(key: string, params?: Record<string, any>): Record<Language, string> {
    const result: Record<Language, string> = {} as Record<Language, string>;
    for (const lang of this.getSupportedLanguages()) {
      result[lang] = this.t(key, lang, params);
    }
    return result;
  }

  setDefaultLanguage(lang: Language): void {
    this.defaultLanguage = lang;
  }

  getDefaultLanguage(): Language {
    return this.defaultLanguage;
  }

  getSupportedLanguages(): Language[] {
    return Object.keys(translations) as Language[];
  }

  getLanguageName(lang: Language): string {
    const names: Record<Language, string> = {
      bn: 'ржмрж╛ржВрж▓рж╛',
      en: 'English',
    };
    return names[lang] || lang;
  }

  formatDate(date: Date, lang: Language = this.defaultLanguage): string {
    if (lang === 'bn') {
      return date.toLocaleDateString('bn-BD');
    }
    return date.toLocaleDateString('en-US');
  }

  formatTime(date: Date, lang: Language = this.defaultLanguage): string {
    if (lang === 'bn') {
      return date.toLocaleTimeString('bn-BD');
    }
    return date.toLocaleTimeString('en-US');
  }

  formatNumber(num: number, lang: Language = this.defaultLanguage): string {
    if (lang === 'bn') {
      return num.toLocaleString('bn-BD');
    }
    return num.toLocaleString('en-US');
  }

  formatDuration(seconds: number, lang: Language = this.defaultLanguage): string {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    const parts: string[] = [];
    if (days > 0) parts.push(`${days}d`);
    if (hours > 0) parts.push(`${hours}h`);
    if (minutes > 0) parts.push(`${minutes}m`);
    if (secs > 0 || parts.length === 0) parts.push(`${secs}s`);

    return parts.join(' ');
  }
}

// Export singleton instance
export const i18n = I18nManager.getInstance();